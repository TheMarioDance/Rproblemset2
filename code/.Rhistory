select(.data = df, DIRECTORIO, SECUENCIA_P, SECUENCIA_ENCUESTA) %>% summarise_all(mean)
select(.data = df, grupo_etario.x, grupo_etario.y) %>% summarise_all(median)
#Canridad de NA por columna
CantidadNa <- colSums(is.na(df))
CantidadNa
bussiness_type.x
df$bussiness_type.x
df <- mutate(df, actividad = ifelse(bussiness_type.x == "Comercio", 1, 0))
df
View(df)
df <- mutate(df, Actividad = ifelse(bussiness_type.x == "Comercio", 1, 0))
df
identification <- read_dta("~/GitHub/Rproblemset2/input/Módulo de identificación.dta")
location <- read_dta("~/GitHub/Rproblemset2/input/Módulo de sitio o ubicación.dta")
##2. Generar variables.
identification=mutate(identification,bussiness_type=case_when(identification$GRUPOS4=="01" ~ "Agricultura" ,
identification$GRUPOS4=="02" ~ "Industria Manufacturera" ,
identification$GRUPOS4=="03" ~ "Comercio" ,
identification$GRUPOS4=="04" ~ "Servicios"))
identification=mutate(identification,grupo_etario=case_when(identification$P241<27 ~ "Jovenes" ,
identification$P241>=27 & identification$P241<40 ~ "Adultos Jovenes" ,
identification$P241>=40 & identification$P241<60 ~ "Adultos" ,
identification$P241>=60 ~ "Adultos Mayores"))
location$ambulante = ifelse(test=(location$P3053==3|location$P3053==4|location$P3053==5), yes=1 , no=0)
identification_sub=select(.data=identification,-AREA:-GRUPOS12)
location_sub=select(.data=location,DIRECTORIO,SECUENCIA_P,SECUENCIA_ENCUESTA,ambulante,P3054,COD_DEPTO,F_EXP)
df <- full_join(x=identification_sub,y=identification_sub,by=c("DIRECTORIO","SECUENCIA_P","SECUENCIA_ENCUESTA"))
#Resumen estadistico general de la nueva base de datos df
summary(df)
select(.data = df, DIRECTORIO, SECUENCIA_P, SECUENCIA_ENCUESTA) %>% summarise_all(mean)
select(.data = df, grupo_etario.x, grupo_etario.y) %>% summarise_all(median)
#Canridad de NA por columna
CantidadNa <- colSums(is.na(df))
df <- mutate(df, Actividad = ifelse(bussiness_type.x == "Comercio", 1, 0))
df
View(df)
df <- full_join(x=identification_sub,y=identification_sub,by=c("DIRECTORIO","SECUENCIA_P","SECUENCIA_ENCUESTA"))
#Resumen estadistico general de la nueva base de datos df
summary(df)
select(.data = df, DIRECTORIO, SECUENCIA_P, SECUENCIA_ENCUESTA) %>% summarise_all(mean)
select(.data = df, grupo_etario.x, grupo_etario.y) %>% summarise_all(median)
#Canridad de NA por columna
CantidadNa <- colSums(is.na(df))
df <- mutate(df, Actividad.x = ifelse(bussiness_type.x == "Comercio", 1, 0))
df
View(df)
df %>% group_by(Actividad.x) %>% summarise(F_EXP.x_mean = mean(F_EXP.x, na.rm = T))
### Juan Fernando Contreras Garcia & Mariana Baquero Jara
### Codigo Uniandes: 202011873
### Update: 18/03/2024
### R version 4.3.2 (2023-10-31 ucrt)
#Limpiar el environment
rm(list=ls())
#Saber version de R.
R.version.string
#Obtener ruta al repositorio actual
getwd()
#instalar/llamar pacman
require(pacman)
#uso la función p_load de pacman para instalar/llamar las librerias que se usaran en el problem set
p_load(rio, # función import/export: permite leer/escribir archivos desde diferentes formatos.
skimr, # funcion skim: describe un conjunto de datos
janitor, # contiene conjuntos de datos.
dplyr) # renombar variables
##1. Importar/exportar bases de datos
#1.1 Importe las bases de datos Módulo de sitio o ubicación en un objeto llamdo location y Módulo de identificación en un objeto llamado identification.
#Se importan las bases de datos del repositorio problem set 2 y se colocan en la carpeta input, se cargan desde dicha ubicacion usando import de rio
identification = import(file="input/Módulo de identificación.dta")
location = import(file="input/Módulo de sitio o ubicación.dta")
##-----------
library(haven)
identification <- read_dta("~/GitHub/Rproblemset2/input/Módulo de identificación.dta")
location <- read_dta("~/GitHub/Rproblemset2/input/Módulo de sitio o ubicación.dta")
##------------
#1.2 Exporte a la carpeta output los objetos cargados en el punto anterior, guÃ¡rdelos como location.rds y identification.rds.
#Se exportan a la carpeta output en formato rds
export(x=identification , file="output/identification.rds")
export(x=location , file="output/location.rds")
##2. Generar variables.
identification=mutate(identification,bussiness_type=case_when(identification$GRUPOS4=="01" ~ "Agricultura" ,
identification$GRUPOS4=="02" ~ "Industria Manufacturera" ,
identification$GRUPOS4=="03" ~ "Comercio" ,
identification$GRUPOS4=="04" ~ "Servicios"))
identification=mutate(identification,grupo_etario=case_when(identification$P241<27 ~ "Jovenes" ,
identification$P241>=27 & identification$P241<40 ~ "Adultos Jovenes" ,
identification$P241>=40 & identification$P241<60 ~ "Adultos" ,
identification$P241>=60 ~ "Adultos Mayores"))
location$ambulante = ifelse(test=(location$P3053==3|location$P3053==4|location$P3053==5), yes=1 , no=0)
identification_sub=select(.data=identification,-AREA:-GRUPOS12)
location_sub=select(.data=location,DIRECTORIO,SECUENCIA_P,SECUENCIA_ENCUESTA,ambulante,P3054,COD_DEPTO,F_EXP)
# 4. Combinar bases de datos
df <- full_join(x=identification_sub,y=identification_sub,by=c("DIRECTORIO","SECUENCIA_P","SECUENCIA_ENCUESTA"))
# 5. Estadisticas descriptivas
#Resumen estadistico general de la nueva base de datos df
summary(df)
# select + summarize_all
select(.data = df, DIRECTORIO, SECUENCIA_P, SECUENCIA_ENCUESTA) %>% summarise_all(mean)
select(.data = df, grupo_etario.x, grupo_etario.y) %>% summarise_all(median)
#Canridad de NA por columna
CantidadNa <- colSums(is.na(df))
# Agrupadas
df <- mutate(df, Actividad.x = ifelse(bussiness_type.x == "Comercio", "Comercio", "Otros"))
# F_EXP.x promedio por actividad comercio
df %>% group_by(Actividad.x) %>% summarise(F_EXP.x_mean = mean(F_EXP.x, na.rm = T))
# ingreso laboral promedio por sexo y tipo de contrato
geih %>% group_by(mujer, p6450) %>% summarise(ing_mean = mean(p6500, na.rm = T))
# ingreso laboral promedio/mediano y aÃ±os promedio en fondo de pension por sexo
geih %>%
group_by(mujer, p6450) %>%
summarise(ing_mean = mean(p6500, na.rm = T),
med_edad = median(p6040, na.rm = T))
df <- mutate(df, Actividad.x = ifelse(bussiness_type.x == "Comercio", "Comercio", "Otros"))
df
View(df)
df %>% group_by(Actividad.x) %>% summarise(F_EXP.x_mean = mean(F_EXP.x, na.rm = T))
df %>% group_by(Actividad.x) %>% summarise(F_EXP.x_mean = mean(F_EXP.x, na.rm = TRUE))
df <- df %>% group_by(Actividad.x) %>%
filter(Comercio, Otros) %>%
summarise(F_EXP.x_mean = mean(F_EXP.x, na.rm = TRUE))
df <- df %>% group_by(Actividad.x) %>%
filter(.df, Comercio, Otros) %>%
summarise(F_EXP.x_mean = mean(F_EXP.x, na.rm = TRUE))
df <- df %>% group_by(Actividad.x) %>%
filter(.data = df, Comercio, Otros) %>%
summarise(F_EXP.x_mean = mean(F_EXP.x, na.rm = TRUE))
df <- df %>% group_by(Actividad.x) %>%
filter(.data = df, Actividad.x == Comercio & Actividad.x == Otros) %>%
summarise(F_EXP.x_mean = mean(F_EXP.x, na.rm = TRUE))
df <- df %>% group_by(Actividad.x) %>%
filter(Actividad.x == "Comercio" & Actividad.x == "Otros") %>%
summarise(F_EXP.x_mean = mean(F_EXP.x, na.rm = TRUE))
df
### Juan Fernando Contreras Garcia & Mariana Baquero Jara
### Codigo Uniandes: 202011873
### Update: 18/03/2024
### R version 4.3.2 (2023-10-31 ucrt)
#Limpiar el environment
rm(list=ls())
#Saber version de R.
R.version.string
#Obtener ruta al repositorio actual
getwd()
#instalar/llamar pacman
require(pacman)
#uso la función p_load de pacman para instalar/llamar las librerias que se usaran en el problem set
p_load(rio, # función import/export: permite leer/escribir archivos desde diferentes formatos.
skimr, # funcion skim: describe un conjunto de datos
janitor, # contiene conjuntos de datos.
dplyr) # renombar variables
##1. Importar/exportar bases de datos
#1.1 Importe las bases de datos Módulo de sitio o ubicación en un objeto llamdo location y Módulo de identificación en un objeto llamado identification.
#Se importan las bases de datos del repositorio problem set 2 y se colocan en la carpeta input, se cargan desde dicha ubicacion usando import de rio
identification = import(file="input/Módulo de identificación.dta")
location = import(file="input/Módulo de sitio o ubicación.dta")
##-----------
library(haven)
identification <- read_dta("~/GitHub/Rproblemset2/input/Módulo de identificación.dta")
location <- read_dta("~/GitHub/Rproblemset2/input/Módulo de sitio o ubicación.dta")
##------------
#1.2 Exporte a la carpeta output los objetos cargados en el punto anterior, guÃ¡rdelos como location.rds y identification.rds.
#Se exportan a la carpeta output en formato rds
export(x=identification , file="output/identification.rds")
export(x=location , file="output/location.rds")
##2. Generar variables.
identification=mutate(identification,bussiness_type=case_when(identification$GRUPOS4=="01" ~ "Agricultura" ,
identification$GRUPOS4=="02" ~ "Industria Manufacturera" ,
identification$GRUPOS4=="03" ~ "Comercio" ,
identification$GRUPOS4=="04" ~ "Servicios"))
identification=mutate(identification,grupo_etario=case_when(identification$P241<27 ~ "Jovenes" ,
identification$P241>=27 & identification$P241<40 ~ "Adultos Jovenes" ,
identification$P241>=40 & identification$P241<60 ~ "Adultos" ,
identification$P241>=60 ~ "Adultos Mayores"))
location$ambulante = ifelse(test=(location$P3053==3|location$P3053==4|location$P3053==5), yes=1 , no=0)
identification_sub=select(.data=identification,-AREA:-GRUPOS12)
location_sub=select(.data=location,DIRECTORIO,SECUENCIA_P,SECUENCIA_ENCUESTA,ambulante,P3054,COD_DEPTO,F_EXP)
# 4. Combinar bases de datos
df <- full_join(x=identification_sub,y=identification_sub,by=c("DIRECTORIO","SECUENCIA_P","SECUENCIA_ENCUESTA"))
# 5. Estadisticas descriptivas
#Resumen estadistico general de la nueva base de datos df
summary(df)
# select + summarize_all
select(.data = df, DIRECTORIO, SECUENCIA_P, SECUENCIA_ENCUESTA) %>% summarise_all(mean)
select(.data = df, grupo_etario.x, grupo_etario.y) %>% summarise_all(median)
#Canridad de NA por columna
CantidadNa <- colSums(is.na(df))
# Agrupadas
df <- mutate(df, Actividad.x = ifelse(bussiness_type.x == "Comercio", "Comercio", "Otros"))
# F_EXP.x promedio por actividad comercio
Prom <- df %>% group_by(Actividad.x) %>% summarise(F_EXP.x_mean = mean(F_EXP.x, na.rm = T))
#Sin los NA
df <- df %>% group_by(Actividad.x) %>%
filter(Actividad.x == "Comercio" & Actividad.x == "Otros") %>%
summarise(F_EXP.x_mean = mean(F_EXP.x, na.rm = TRUE))
# ingreso laboral promedio por sexo y tipo de contrato
geih %>% group_by(mujer, p6450) %>% summarise(ing_mean = mean(p6500, na.rm = T))
# ingreso laboral promedio/mediano y aÃ±os promedio en fondo de pension por sexo
geih %>%
group_by(mujer, p6450) %>%
summarise(ing_mean = mean(p6500, na.rm = T),
med_edad = median(p6040, na.rm = T))
df <- mutate(df, Actividad.x = ifelse(bussiness_type.x == "Comercio", "Comercio", "Otros"))
df <- mutate(df, Actividad.x = ifelse(bussiness_type.x == "Comercio", "Comercio", "Otros"))
df <- full_join(x=identification_sub,y=identification_sub,by=c("DIRECTORIO","SECUENCIA_P","SECUENCIA_ENCUESTA"))
#Resumen estadistico general de la nueva base de datos df
summary(df)
select(.data = df, DIRECTORIO, SECUENCIA_P, SECUENCIA_ENCUESTA) %>% summarise_all(mean)
select(.data = df, grupo_etario.x, grupo_etario.y) %>% summarise_all(median)
#Canridad de NA por columna
CantidadNa <- colSums(is.na(df))
df <- mutate(df, Actividad.x = ifelse(bussiness_type.x == "Comercio", "Comercio", "Otros"))
df
Prom <- df %>% group_by(Actividad.x) %>% summarise(F_EXP.x_mean = mean(F_EXP.x, na.rm = T))
Prom
PromSinNA <- df %>% group_by(Actividad.x) %>%
filter(Actividad.x == "Comercio" & Actividad.x == "Otros") %>%
summarise(F_EXP.x_mean = mean(F_EXP.x, na.rm = TRUE))
PromSinNA
PromSinNA
PromSinNA <- df %>% group_by(Actividad.x) %>%
filter(Actividad.x == "Comercio" & Actividad.x == "Otros")
PromSinNA
Prom <- df %>% group_by(Actividad.x) %>% summarise(F_EXP.x_mean = mean(F_EXP.x, na.rm = F))
Prom
Prom <- df %>% group_by(Actividad.x) %>% summarise(F_EXP.x_mean = mean(F_EXP.x))
Prom
PromSinNA <- df %>%
filter(Actividad.x %in% c("Comercio", "Otros")) %>%
group_by(Actividad.x) %>%
summarise(F_EXP.x_mean = mean(F_EXP.x, na.rm = T))
PromSinNA
Prom <- df %>% group_by(Actividad.x) %>% summarise(F_EXP.x_mean = mean(F_EXP.x))
Prom
PromSinNA <- df %>%
filter(Actividad.x == "Comercio" & Actividad.x == "Otros") %>%
group_by(Actividad.x) %>%
summarise(F_EXP.x_mean = mean(F_EXP.x, na.rm = T))
PromSinNA
PromSinNA
PromSinNA <- df %>%
filter(Actividad.x == "Comercio" | Actividad.x == "Otros") %>%
group_by(Actividad.x) %>%
summarise(F_EXP.x_mean = mean(F_EXP.x, na.rm = T))
PromSinNA
PromSinNA
PromSinNA <- df %>%
filter(Actividad.x == "Comercio" | Actividad.x == "Otros") %>%
group_by(Actividad.x) %>%
summarise(F_EXP.x_mean = mean(F_EXP.x, na.rm = T))
PromSinNA
colnames(df)
Com_y_grupo %>% group_by(Actividad.x, grupo_etario.x) %>%
summarise(F_EXP.x_mean = mean(F_EXP.x, na.rm = T))
Com_y_grupo <- df %>% group_by(Actividad.x, grupo_etario.x) %>%
summarise(F_EXP.x_mean = mean(F_EXP.x, na.rm = T))
Com_y_grupo
Com_y_grupo <- df %>% group_by(Actividad.x, grupo_etario.x) %>%
summarise(F_EXP.x_mean = mean(F_EXP.x, na.rm = F))
Com_y_grupo
Com_y_grupo <- df %>%
filter(Actividad.x == "Comercio" | Actividad.x == "Otros") %>%
group_by(Actividad.x, grupo_etario.x) %>%
summarise(F_EXP.x_mean = mean(F_EXP.x, na.rm = T))
Com_y_grupo
df_sinNA <- df %>%
filter(Actividad.x == "Comercio" | Actividad.x == "Otros")
df_sinNA
df_sinNA2 <- df_sinNA %>%
group_by(Actividad.x, grupo_etario.x) %>%
summarise(F_EXP.x_mean = mean(F_EXP.x, na.rm = T))
df_sinNA2
Datos_sin_NA <- df_sinNA %>%
group_by(Actividad.x, grupo_etario.x) %>%
summarise(F_EXP.x_mean = mean(F_EXP.x, na.rm = T))
Datos_sin_NA
df <- mutate(df, Grupo.x = ifelse(grupo_etario.x == "Adultos Jovenes",
"Adultos Jovenes", "Otros"))
df
View(df)
df_adul_jov_dep <- df %>%
group_by(Grupo.x) %>%
summarise(moda = mode(COD_DEPTO.x, na.rm = T))
df_adul_jov_dep <- df %>%
group_by(Grupo.x) %>%
summarise(moda = mode(COD_DEPTO.x))
df_adul_jov_dep
df_adul_jov_dep <- df %>%
group_by(Grupo.x) %>%
summarise(moda = median(COD_DEPTO.x))
df_adul_jov_dep <- df %>%
group_by(Grupo.x) %>%
summarise(moda = mode(COD_DEPTO.x, na.rm = T))
df_adul_jov_dep <- df %>%
group_by(Grupo.x) %>%
summarise(tabla = names(table(COD_DEPTO.x))))
df_adul_jov_dep <- df %>%
group_by(Grupo.x) %>%
summarise(tabla = names(table(COD_DEPTO.x)))
df_adul_jov_dep
df_adul_jov_dep <- df %>%
group_by(Grupo.x) %>%
summarise(COD_DEPTO.x))
df_adul_jov_dep <- df %>%
group_by(Grupo.x) %>%
summarise(COD_DEPTO.x)
df_adul_jov_dep
df_adul_jov_dep <- df %>%
filter(grupo_etario.x == "Adultos Jovenes") %>%
summarise(COD_DEPTO.x)
df_adul_jov_dep
df_adul_jov_dep <- df %>%
filter(grupo_etario.x == "Adultos Jovenes") %>%
count(COD_DEPTO.x) %>%
arrange(desc(n)) %>% slice(1) %>% pull(COD_DEPTO.x)
df_adul_jov_dep
df_adul_jov_dep <- df %>%
filter(grupo_etario.x == "Adultos Jovenes") %>%
count(COD_DEPTO.x)
df_adul_jov_dep
df_adul_jov_dep <- df %>%
group_by(Grupo.x) %>%
count(COD_DEPTO.x)
df_adul_jov_dep
Comercio
table(df$COD_DEPTO.x)
View(df_adul_jov_dep)
df_adul_jov_dep <- df %>%
filter(grupo_etario.x == "Adultos Jovenes") %>%
count(COD_DEPTO.x)
df_adul_jov_dep
View(df_adul_jov_dep)
df_adul_jov_dep <- df %>%
group_by(Grupo.x, Actividad.x) %>%
filter(grupo_etario.x == "Adultos Jovenes" | Actividad.x == "Otros") %>%
count(COD_DEPTO.x)
df_adul_jov_dep
View(df_adul_jov_dep)
df_adul_jov_dep <- df %>%
group_by(Grupo.x, Actividad.x) %>%
filter(grupo_etario.x == "Adultos Jovenes" | Actividad.x == "Comercio") %>%
count(COD_DEPTO.x)
df_adul_jov_dep
df_adul_jov_dep
df_adul_jov_dep
View(df_adul_jov_dep)
df_adul_jov_dep <- df %>%
group_by(Grupo.x, Actividad.x) %>%
filter(grupo_etario.x == "Adultos Jovenes" & Actividad.x == "Comercio") %>%
count(COD_DEPTO.x)
df_adul_jov_dep
View(df_adul_jov_dep)
df_adul_jov_dep <- df %>%
group_by(Grupo.x, Actividad.x) %>%
filter(grupo_etario.x == "Adultos Jovenes" | Actividad.x == "Comercio") %>%
count(COD_DEPTO.x)
View(df_adul_jov_dep)
df_adul_jov_dep <- df %>%
group_by(Grupo.x, Actividad.x) %>%
filter(grupo_etario.x == "Adultos Jovenes" & Actividad.x == "Otros") %>%
count(COD_DEPTO.x)
View(df_adul_jov_dep)
df_adul_jov_dep <- df %>%
group_by(Grupo.x, Actividad.x) %>%
filter(grupo_etario.x == "Adultos Jovenes" & Actividad.x == "Comercio") %>%
count(COD_DEPTO.x)
View(df_adul_jov_dep)
df_adul_jov_dep <- df %>%
group_by(Grupo.x, Actividad.x) %>%
count(COD_DEPTO.x)
View(df_adul_jov_dep)
Graf <- pivot_wider(data = df,
id_cols = Actividad.x,
names_from = Comercio,
values_from = count(COD_DEPTO.x))
#Limpiar el environment
rm(list=ls())
#Saber version de R.
R.version.string
#Obtener ruta al repositorio actual
getwd()
#instalar/llamar pacman
require(pacman)
#uso la función p_load de pacman para instalar/llamar las librerias que se usaran en el problem set
p_load(rio, # función import/export: permite leer/escribir archivos desde diferentes formatos.
skimr, # funcion skim: describe un conjunto de datos
janitor, # contiene conjuntos de datos.
dplyr) # renombar variables
#instalar/llamar pacman
require(pacman)
#uso la función p_load de pacman para instalar/llamar las librerias que se usaran en el problem set
p_load(rio, # función import/export: permite leer/escribir archivos desde diferentes formatos.
skimr, # funcion skim: describe un conjunto de datos
janitor, # contiene conjuntos de datos
tidyverse, ## manipular/limpiar conjuntos de datos
dplyr) # renombar variables
#1.1 Importe las bases de datos Módulo de sitio o ubicación en un objeto llamdo location y Módulo de identificación en un objeto llamado identification.
#Se importan las bases de datos del repositorio problem set 2 y se colocan en la carpeta input, se cargan desde dicha ubicacion usando import de rio
identification = import(file="input/Módulo de identificación.dta")
location = import(file="input/Módulo de sitio o ubicación.dta")
##-----------
library(haven)
identification <- read_dta("~/GitHub/Rproblemset2/input/Módulo de identificación.dta")
location <- read_dta("~/GitHub/Rproblemset2/input/Módulo de sitio o ubicación.dta")
#1.2 Exporte a la carpeta output los objetos cargados en el punto anterior, guÃ¡rdelos como location.rds y identification.rds.
#Se exportan a la carpeta output en formato rds
export(x=identification , file="output/identification.rds")
export(x=location , file="output/location.rds")
##2. Generar variables.
identification=mutate(identification,bussiness_type=case_when(identification$GRUPOS4=="01" ~ "Agricultura" ,
identification$GRUPOS4=="02" ~ "Industria Manufacturera" ,
identification$GRUPOS4=="03" ~ "Comercio" ,
identification$GRUPOS4=="04" ~ "Servicios"))
identification=mutate(identification,grupo_etario=case_when(identification$P241<27 ~ "Jovenes" ,
identification$P241>=27 & identification$P241<40 ~ "Adultos Jovenes" ,
identification$P241>=40 & identification$P241<60 ~ "Adultos" ,
identification$P241>=60 ~ "Adultos Mayores"))
location$ambulante = ifelse(test=(location$P3053==3|location$P3053==4|location$P3053==5), yes=1 , no=0)
identification_sub=select(.data=identification,-AREA:-GRUPOS12)
location_sub=select(.data=location,DIRECTORIO,SECUENCIA_P,SECUENCIA_ENCUESTA,ambulante,P3054,COD_DEPTO,F_EXP)
df <- full_join(x=identification_sub,y=identification_sub,by=c("DIRECTORIO","SECUENCIA_P","SECUENCIA_ENCUESTA"))
#Resumen estadistico general de la nueva base de datos df
summary(df)
select(.data = df, DIRECTORIO, SECUENCIA_P, SECUENCIA_ENCUESTA) %>% summarise_all(mean)
select(.data = df, grupo_etario.x, grupo_etario.y) %>% summarise_all(median)
#Canridad de NA por columna
CantidadNa <- colSums(is.na(df))
df <- mutate(df, Actividad.x = ifelse(bussiness_type.x == "Comercio", "Comercio", "Otros"))
Prom <- df %>% group_by(Actividad.x) %>% summarise(F_EXP.x_mean = mean(F_EXP.x))
PromSinNA <- df %>%
filter(Actividad.x == "Comercio" | Actividad.x == "Otros") %>%
group_by(Actividad.x) %>%
summarise(F_EXP.x_mean = mean(F_EXP.x, na.rm = T))
Com_y_grupo <- df %>% group_by(Actividad.x, grupo_etario.x) %>%
summarise(F_EXP.x_mean = mean(F_EXP.x))
Com_y_grupo <- df %>%
filter(Actividad.x == "Comercio" | Actividad.x == "Otros") %>%
group_by(Actividad.x, grupo_etario.x) %>%
summarise(F_EXP.x_mean = mean(F_EXP.x, na.rm = T))
df_sinNA <- df %>%
filter(Actividad.x == "Comercio" | Actividad.x == "Otros")
Datos_sin_NA <- df_sinNA %>%
group_by(Actividad.x, grupo_etario.x) %>%
summarise(F_EXP.x_mean = mean(F_EXP.x, na.rm = T))
df <- mutate(df, Grupo.x = ifelse(grupo_etario.x == "Adultos Jovenes",
"Adultos Jovenes", "Otros"))
df_adul_jov_dep <- df %>%
group_by(Grupo.x) %>%
count(COD_DEPTO.x)
df_adul_jov_dep <- df %>%
filter(grupo_etario.x == "Adultos Jovenes") %>%
count(COD_DEPTO.x)
df_adul_jov_dep <- df %>%
group_by(Grupo.x, Actividad.x) %>%
count(COD_DEPTO.x)
df_adul_jov_dep <- df %>%
group_by(Grupo.x, Actividad.x) %>%
filter(grupo_etario.x == "Adultos Jovenes" & Actividad.x == "Comercio") %>%
count(COD_DEPTO.x)
Graf <- pivot_wider(data = df,
id_cols = Actividad.x,
names_from = Comercio,
values_from = count(COD_DEPTO.x))
Graf <- pivot_wider(data = df,
id_cols = Actividad.x,
names_from = Comercio,
values_from = count(COD_DEPTO.x))
Graf <- pivot_wider(data = df,
id_cols = grupo_etario.x,
names_from = Actividad.x,
values_from = count(COD_DEPTO.x))
Graf <- pivot_wider(data = df,
id_cols = grupo_etario.x,
names_from = Actividad.x,
values_from = F_EXP.x_mean)
Graf <- pivot_wider(data = df,
id_cols = grupo_etario.x,
names_from = Actividad.x,
values_from = F_EXP.x_mean)
Graf <- pivot_wider(data = df,
id_cols = grupo_etario.x,
names_from = Actividad.x,
values_from = COD_DEPTO.x)
Graf
Graf <- pivot_wider(data = df,
id_cols = grupo_etario.x["Adultos Jovenes"],
names_from = Actividad.x["Comercio"],
values_from = COD_DEPTO.x)
Graf <- pivot_wider(data = df,
id_cols = grupo_etario.x["Adultos Jovenes"],
names_from = Actividad.x,
values_from = COD_DEPTO.x)
hist(df_adul_jov_dep$Grupo.x)
hist(df_adul_jov_dep$COD_DEPTO.x)
hist(df_adul_jov_dep$n)
df_adul_jov_dep <- df %>%
group_by(Grupo.x, Actividad.x) %>%
filter(grupo_etario.x == "Adultos Jovenes" & Actividad.x == "Comercio") %>%
count(COD_DEPTO.x)
df_adul_jov_dep
df_adul_jov_dep <- df %>%
group_by(Grupo.x, Actividad.x) %>%
filter(grupo_etario.x == "Adultos Jovenes" & Actividad.x == "Comercio") %>%
count(COD_DEPTO.x)
Adultos_jovenes_cantidad_departamento <- rename(.data = df_adul_jov_dep, "Cantidad Personas" = "n")
Adultos_jovenes_cantidad_departamento
hist(Adultos_jovenes_cantidad_departamento$`Cantidad Personas`)
Adultos_jovenes__en_comercio_cantidad_departamento <- rename(.data = df_adul_jov_dep, "Cantidad Personas" = "n")
hist(Adultos_jovenes__en_comercio_cantidad_departamento$`Cantidad Personas`)
Adultos_jovenes__en_comercio_cantidad_personas <- rename(.data = df_adul_jov_dep, "Cantidad Personas" = "n")
hist(Adultos_jovenes__en_comercio_cantidad_personas$`Cantidad Personas`)
AdultosJovenes_en_Comercio_y_Depto <- rename(.data = df_adul_jov_dep, "Cantidad Personas" = "n")
hist(AdultosJovenes_en_Comercio_y_Depto$`Cantidad Personas`)
hist(AdultosJovenes_en_Comercio_y_Depto$`Cantidad Personas`)
